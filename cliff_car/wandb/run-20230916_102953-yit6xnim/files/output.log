
Started training: seed: 1002, linear: True, factor: 1, delta: 0.01
C:\Users\calle\Anaconda3\envs\bachelor\Lib\site-packages\torch\functional.py:504: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ..\aten\src\ATen\native\TensorShape.cpp:3484.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]






































































  5%|█████▍                                                                                                       | 497/10000 [02:21<47:11,  3.36it/s]
  5%|█████▍                                                                                                       | 499/10000 [02:22<48:41,  3.25it/s]












































































 10%|██████████▊                                                                                                  | 996/10000 [05:02<43:13,  3.47it/s]
 10%|██████████▉                                                                                                  | 999/10000 [05:03<42:12,  3.55it/s]
















































































 15%|████████████████▏                                                                                           | 1498/10000 [07:50<42:00,  3.37it/s]
 15%|████████████████▏                                                                                           | 1499/10000 [07:50<40:55,  3.46it/s]















































































 20%|█████████████████████▌                                                                                      | 1995/10000 [10:40<39:39,  3.36it/s]
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 10/10 [00:00<00:00, 26.10it/s]









































































 25%|██████████████████████████▉                                                                                 | 2499/10000 [13:08<36:51,  3.39it/s]
>>> Testing: -seed-1002-linear-True-delta-0.01-factor-1-r_basis_diff-3-r_basis_var-5-frame-2500-epsilon-0.55-loss-19.232
















































































 30%|████████████████████████████████▎                                                                           | 2995/10000 [16:00<32:39,  3.57it/s]
 30%|████████████████████████████████▍                                                                           | 2999/10000 [16:01<32:44,  3.56it/s]
















































































 35%|█████████████████████████████████████▋                                                                      | 3494/10000 [18:52<30:50,  3.52it/s]
 35%|█████████████████████████████████████▊                                                                      | 3499/10000 [18:54<30:59,  3.50it/s]


















































































 40%|███████████████████████████████████████████▏                                                                | 3996/10000 [21:48<28:38,  3.49it/s]
 40%|███████████████████████████████████████████▏                                                                | 3999/10000 [21:49<28:23,  3.52it/s]


















































































 45%|████████████████████████████████████████████████▌                                                           | 4495/10000 [24:45<28:17,  3.24it/s]
 45%|████████████████████████████████████████████████▌                                                           | 4499/10000 [24:46<27:06,  3.38it/s]


















































































 50%|█████████████████████████████████████████████████████▉                                                      | 4996/10000 [27:38<24:49,  3.36it/s]
 50%|█████████████████████████████████████████████████████▉                                                      | 4999/10000 [27:39<24:01,  3.47it/s]

















































































100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 10/10 [00:00<00:00, 25.70it/s]
 55%|███████████████████████████████████████████████████████████▍                                                | 5500/10000 [30:25<37:35,  2.00it/s]











































































 60%|████████████████████████████████████████████████████████████████▊                                           | 5998/10000 [32:55<19:56,  3.35it/s]
 60%|████████████████████████████████████████████████████████████████▊                                           | 5999/10000 [32:55<19:54,  3.35it/s]




















 61%|█████████████████████████████████████████████████████████████████▊                                          | 6093/10000 [33:40<21:35,  3.02it/s]
Traceback (most recent call last):
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\cliff_car_experiments.py", line 149, in <module>
    train_data = agent.train(train_frames = train_frames,
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\cliff_car_robust_agent.py", line 153, in train
    loss = self.update_model()
           ^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\cliff_car_robust_agent.py", line 105, in update_model
    loss, robust_estimator = self._compute_dqn_loss(*samples)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\cliff_car_robust_agent.py", line 82, in _compute_dqn_loss
    robust_estimator, beta_max = distributionalQLearning.robust_estimator(X_p=state, y_p=next_state,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\..\distributionalQLearning3.py", line 162, in robust_estimator
    return maximize_f(f)
           ^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\..\distributionalQLearning3.py", line 64, in maximize_f
    res = minimize(lambda x : -f(x), 1, method = 'Nelder-Mead', tol = 1e-5, bounds = [(1e-5, np.inf)])
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\calle\Anaconda3\envs\bachelor\Lib\site-packages\scipy\optimize\_minimize.py", line 684, in minimize
    res = _minimize_neldermead(fun, x0, args, callback, bounds=bounds,
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\calle\Anaconda3\envs\bachelor\Lib\site-packages\scipy\optimize\_optimize.py", line 870, in _minimize_neldermead
    fxr = func(xr)
          ^^^^^^^^
  File "C:\Users\calle\Anaconda3\envs\bachelor\Lib\site-packages\scipy\optimize\_optimize.py", line 569, in function_wrapper
    fx = function(np.copy(x), *(wrapper_args + args))
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\..\distributionalQLearning3.py", line 64, in <lambda>
    res = minimize(lambda x : -f(x), 1, method = 'Nelder-Mead', tol = 1e-5, bounds = [(1e-5, np.inf)])
                               ^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\..\distributionalQLearning3.py", line 134, in estimator
    Sigma_tilde = np.linalg.pinv(Sigma_inv+(2/beta)*A)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<__array_function__ internals>", line 177, in pinv
KeyboardInterrupt