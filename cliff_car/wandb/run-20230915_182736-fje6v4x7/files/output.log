
Started training: seed: 1001, linear: True, factor: -1, delta: 0.05







































































































































































































  8%|██████████████▉                                                                                                                                                                     | 248/3000 [06:39<1:12:36,  1.58s/it]
  8%|██████████████▉                                                                                                                                                                     | 249/3000 [06:40<1:12:45,  1.59s/it]












































 10%|█████████████████▉                                                                                                                                                                  | 299/3000 [10:02<1:30:42,  2.02s/it]
Traceback (most recent call last):
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\cliff_car_experiments.py", line 139, in <module>
    train_data = agent.train(train_frames = train_frames,
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\cliff_car_robust_agent.py", line 153, in train
    loss = self.update_model()
           ^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\cliff_car_robust_agent.py", line 105, in update_model
    loss, robust_estimator = self._compute_dqn_loss(*samples)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\cliff_car_robust_agent.py", line 82, in _compute_dqn_loss
    robust_estimator, beta_max = distributionalQLearning.robust_estimator(X_p=state, y_p=next_state,
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\..\distributionalQLearning3.py", line 162, in robust_estimator
    return maximize_f(f)
           ^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\..\distributionalQLearning3.py", line 64, in maximize_f
    res = minimize(lambda x : -f(x), 1, method = 'Nelder-Mead', tol = 1e-5, bounds = [(1e-5, np.inf)])
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\calle\Anaconda3\envs\bachelor\Lib\site-packages\scipy\optimize\_minimize.py", line 684, in minimize
    res = _minimize_neldermead(fun, x0, args, callback, bounds=bounds,
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\calle\Anaconda3\envs\bachelor\Lib\site-packages\scipy\optimize\_optimize.py", line 870, in _minimize_neldermead
    fxr = func(xr)
          ^^^^^^^^
  File "C:\Users\calle\Anaconda3\envs\bachelor\Lib\site-packages\scipy\optimize\_optimize.py", line 569, in function_wrapper
    fx = function(np.copy(x), *(wrapper_args + args))
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\..\distributionalQLearning3.py", line 64, in <lambda>
    res = minimize(lambda x : -f(x), 1, method = 'Nelder-Mead', tol = 1e-5, bounds = [(1e-5, np.inf)])
                               ^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\..\distributionalQLearning3.py", line 134, in estimator
    Sigma_tilde = np.linalg.pinv(Sigma_inv+(2/beta)*A)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<__array_function__ internals>", line 200, in pinv
  File "C:\Users\calle\Anaconda3\envs\bachelor\Lib\site-packages\numpy\linalg\linalg.py", line 1986, in pinv
    cutoff = rcond[..., newaxis] * amax(s, axis=-1, keepdims=True)
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<__array_function__ internals>", line 177, in amax
KeyboardInterrupt