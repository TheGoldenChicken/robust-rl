
Started training: seed: 1002, linear: True, factor: -1, delta: 0.01
C:\Users\calle\Anaconda3\envs\bachelor\Lib\site-packages\torch\functional.py:504: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ..\aten\src\ATen\native\TensorShape.cpp:3484.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]















































































































































































































































































































































































































 10%|██████████▊                                                                                                 | 499/5000 [13:20<2:00:13,  1.60s/it]
>>> Testing: -seed-1002-linear-True-delta-0.01-factor--1-r_basis_diff-1-r_basis_var-5-frame-500-epsilon-0.388-loss-0.168































































































































































































































































































































































































































 20%|█████████████████████▌                                                                                      | 999/5000 [27:52<1:49:22,  1.64s/it]
>>> Testing: -seed-1002-linear-True-delta-0.01-factor--1-r_basis_diff-1-r_basis_var-5-frame-1000-epsilon-0.275-loss-0.097






























































 21%|██████████████████████▋                                                                                    | 1062/5000 [31:21<1:56:16,  1.77s/it]
Traceback (most recent call last):
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\cliff_car_experiments.py", line 149, in <module>
    train_data = agent.train(train_frames = train_frames,
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\cliff_car_robust_agent.py", line 153, in train
    loss = self.update_model()
           ^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\cliff_car_robust_agent.py", line 105, in update_model
    loss, robust_estimator = self._compute_dqn_loss(*samples)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\cliff_car_robust_agent.py", line 74, in _compute_dqn_loss
    Q_vals = self.dqn(torch.FloatTensor(next_state).to(device))  # Should all have the same action
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\calle\Anaconda3\envs\bachelor\Lib\site-packages\torch\nn\modules\module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\network.py", line 64, in forward
    basis = self.radial_basis(x)
            ^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\calle\Documents\GitHub\robust-rl\cliff_car\network.py", line 72, in radial_basis
    basis[:,i] = self.mNormal[i].log_prob(position).exp()
    ~~~~~^^^^^
KeyboardInterrupt